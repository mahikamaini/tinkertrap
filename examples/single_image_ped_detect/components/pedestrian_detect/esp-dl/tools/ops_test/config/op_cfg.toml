[meta]
    seed = 0
    batch_size = 1
    calib_steps = 8         # The minimum value for calib_steps is 8.
    model_version = 1
    opset = 13

[ops_test]
    [ops_test.Conv]
    test_func = "CONV_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
    targets = ["esp32s3", "esp32p4"]
    restrictions = "Support 1d/2d conv, groups only support 1 or input_channels"
        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned
        input_shape = [1, 3, 224, 224]
        export_name_prefix = "conv2d_ishap_1_3_224_224_kshap_16_3_3_3_relu"
        export_path = ""
        in_channels = 3
        out_channels = 16
        kernel_size = [3, 3]
        stride = [2, 2]
        padding = [0, 0]
        dilation = [1, 1]
        groups = 1
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned
        input_shape = [1, 16, 32, 32]
        export_name_prefix = "conv2d_ishap_1_16_32_32_kshap_32_16_1_1"
        export_path = ""
        in_channels = 16
        out_channels = 32
        kernel_size = [1, 1]
        stride = [1, 1]
        padding = [0, 0]
        dilation = [1, 1]
        groups = 1
        bias = true
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 16, 120, 120]
        export_name_prefix = "conv2d_ishap_1_16_120_120_kshap_32_16_1_1"
        export_path = ""
        in_channels = 16
        out_channels = 32
        kernel_size = [1, 1]
        stride = [1, 1]
        padding = [0, 0]
        dilation = [1, 1]
        groups = 1
        bias = true
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 16, 32, 32]
        export_name_prefix = "conv2d_ishap_1_16_32_32_kshap_32_16_5_5_relu"
        export_path = ""
        in_channels = 16
        out_channels = 32
        kernel_size = [5, 5]
        stride = [2, 2]
        padding = [2, 2]
        dilation = [1, 1]
        groups = 1
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 16, 32, 32]
        export_name_prefix = "conv2d_ishap_1_16_32_32_kshap_32_16_7_7_relu"
        export_path = ""
        in_channels = 16
        out_channels = 32
        kernel_size = [7, 7]
        stride = [2, 2]
        padding = [2, 2]
        dilation = [1, 1]
        groups = 1
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 48, 19, 29]
        export_name_prefix = "conv2d_ishap_1_48_19_29_kshap_16_48_3_3"
        export_path = ""
        in_channels = 48
        out_channels = 16
        kernel_size = [3, 3]
        stride = [2, 2]
        padding = [1, 1]
        dilation = [1, 1]
        groups = 1
        bias = true
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 33, 19, 29]
        export_name_prefix = "conv2d_ishap_1_33_19_29_kshap_55_33_3_3"
        export_path = ""
        in_channels = 33
        out_channels = 55
        kernel_size = [3, 3]
        stride = [1, 1]
        padding = [1, 1]
        dilation = [1, 1]
        groups = 1
        bias = true
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 3, 3]
        export_name_prefix = "conv2d_ishap_1_16_3_3_kshap_16_16_3_3"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = [3, 3]
        stride = [1, 1]
        padding = [1, 1]
        dilation = [1, 1]
        groups = 1
        bias = false
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 31, 3, 3]
        export_name_prefix = "conv2d_ishap_1_31_3_3_kshap_31_31_5_5"
        export_path = ""
        in_channels = 31
        out_channels = 31
        kernel_size = [5, 5]
        stride = [1, 1]
        padding = [2, 2]
        dilation = [1, 1]
        groups = 1
        bias = false
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 3, 3]
        export_name_prefix = "depthwise_conv2d_ishap_1_16_3_3_kshap_16_1_3_3_relu"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = [3, 3]
        stride = [1, 1]
        padding = [1, 1]
        dilation = [1, 1]
        groups = 16
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 20, 20]
        export_name_prefix = "depthwise_conv2d_ishap_1_16_20_20_kshap_16_1_5_5_relu"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = [5, 5]
        stride = [2, 2]
        padding = [1, 1]
        dilation = [1, 1]
        groups = 16
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 20, 20]
        export_name_prefix = "depthwise_conv2d_ishap_1_16_20_20_kshap_16_1_7_7_relu"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = [7, 7]
        stride = [1, 2]
        padding = [2, 2]
        dilation = [1, 1]
        groups = 16
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 30, 20, 20]
        export_name_prefix = "depthwise_conv2d_ishap_1_30_20_20_kshap_30_1_7_7_relu"
        export_path = ""
        in_channels = 30
        out_channels = 30
        kernel_size = [7, 7]
        stride = [1, 2]
        padding = [2, 2]
        dilation = [1, 1]
        groups = 30
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 32, 120, 120]
        export_name_prefix = "depthwise_conv2d_ishap_1_32_120_120_kshap_32_1_3_3_relu"
        export_path = ""
        in_channels = 32
        out_channels = 32
        kernel_size = [3, 3]
        stride = [1, 1]
        padding = [0, 0]
        dilation = [1, 1]
        groups = 32
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 3, 3]
        export_name_prefix = "depthwise_conv2d_ishap_1_16_3_3_kshap_16_1_5_5"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = [5, 5]
        stride = [1, 1]
        padding = [2, 2]
        dilation = [1, 1]
        groups = 16
        bias = false
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 9, 9]
        export_name_prefix = "depthwise_conv2d_ishap_1_16_9_9_kshap_16_1_5_5"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = [5, 5]
        stride = [1, 1]
        padding = [12, 12]
        dilation = [3, 3]
        groups = 16
        bias = false
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 31, 3, 3]
        export_name_prefix = "depthwise_conv2d_ishap_1_31_3_3_kshap_31_1_5_5"
        export_path = ""
        in_channels = 31
        out_channels = 31
        kernel_size = [5, 5]
        stride = [1, 1]
        padding = [2, 2]
        dilation = [1, 1]
        groups = 31
        bias = false
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned
        input_shape = [1, 3, 224]
        export_name_prefix = "conv1d_ishap_1_3_224_kshap_16_3_3_relu"
        export_path = ""
        in_channels = 3
        out_channels = 16
        kernel_size = 3
        stride = 2
        padding = 0
        dilation = 1
        groups = 1
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned
        input_shape = [1, 16, 32]
        export_name_prefix = "conv1d_ishap_1_16_32_kshap_32_16_1"
        export_path = ""
        in_channels = 16
        out_channels = 32
        kernel_size = 1
        stride = 1
        padding = 0
        dilation = 1
        groups = 1
        bias = true
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 16, 120]
        export_name_prefix = "conv1d_ishap_1_16_120_kshap_32_16_1"
        export_path = ""
        in_channels = 16
        out_channels = 32
        kernel_size = 1
        stride = 1
        padding = 0
        dilation = 1
        groups = 1
        bias = true
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 16, 32]
        export_name_prefix = "conv1d_ishap_1_16_32_kshap_32_16_5_relu"
        export_path = ""
        in_channels = 16
        out_channels = 32
        kernel_size = 5
        stride = 2
        padding = 2
        dilation = 1
        groups = 1
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 16, 32]
        export_name_prefix = "conv1d_ishap_1_16_32_kshap_32_16_7_relu"
        export_path = ""
        in_channels = 16
        out_channels = 32
        kernel_size = 7
        stride = 2
        padding = 2
        dilation = 1
        groups = 1
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 48, 19]
        export_name_prefix = "conv1d_ishap_1_48_19_kshap_16_48_3"
        export_path = ""
        in_channels = 48
        out_channels = 16
        kernel_size = 3
        stride = 2
        padding = 1
        dilation = 1
        groups = 1
        bias = true
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Conv, pointwise, aligned, two task
        input_shape = [1, 33, 29]
        export_name_prefix = "conv1d_ishap_1_33_29_kshap_55_33_3"
        export_path = ""
        in_channels = 33
        out_channels = 55
        kernel_size = 3
        stride = 1
        padding = 1
        dilation = 1
        groups = 1
        bias = true
        activation_func = ""    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 3]
        export_name_prefix = "depthwise_conv1d_ishap_1_16_3_kshap_16_1_3_relu"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = 3
        stride = 1
        padding = 1
        dilation = 1
        groups = 16
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 20]
        export_name_prefix = "depthwise_conv1d_ishap_1_16_20_kshap_16_1_5_relu"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = 5
        stride = 2
        padding = 1
        dilation = 1
        groups = 16
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 16, 20]
        export_name_prefix = "depthwise_conv1d_ishap_1_16_20_kshap_16_1_7_relu"
        export_path = ""
        in_channels = 16
        out_channels = 16
        kernel_size = 7
        stride = 2
        padding = 2
        dilation = 1
        groups = 16
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 30, 20]
        export_name_prefix = "depthwise_conv1d_ishap_1_30_20_kshap_30_1_7_relu"
        export_path = ""
        in_channels = 30
        out_channels = 30
        kernel_size = 7
        stride = 2
        padding = 2
        dilation = 1
        groups = 30
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Conv.cfg]]
        # Can be configured as 1-d or 2-d arrays
        input_shape = [1, 32, 120]
        export_name_prefix = "depthwise_conv1d_ishap_1_32_120_kshap_32_1_3_relu"
        export_path = ""
        in_channels = 32
        out_channels = 32
        kernel_size = 3
        stride = 1
        padding = 0
        dilation = 1
        groups = 32
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

    [ops_test.Gemm]
    test_func = "LINEAR_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Gemm.cfg]]
        input_shape = [1, 16]
        export_name_prefix = "linear_ishap_1_16_kshap_16_16_relu"
        export_path = ""
        in_features = 16
        out_features = 16
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Gemm.cfg]]
        input_shape = [1, 31]
        export_name_prefix = "linear_ishap_1_31_kshap_32_31_relu"
        export_path = ""
        in_features = 31
        out_features = 32
        bias = true
        activation_func = "ReLU"    # "", "ReLU"

        [[ops_test.Gemm.cfg]]
        input_shape = [1, 64]
        export_name_prefix = "linear_ishap_1_64_kshap_32_64_relu"
        export_path = ""
        in_features = 64
        out_features = 32
        bias = true
        activation_func = ""    # "", "ReLU"

    [ops_test.Add]
    test_func = "ADD_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
    restrictions = "Support up to 4D"
        [[ops_test.Add.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 16]]
        export_name_prefix = "add_ishap_1_96_5_1_16"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[1, 96, 5, 48], [1, 96, 5, 48]]
        export_name_prefix = "add_ishap_1_96_5_48"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[1, 96, 5, 48], [1, 96, 5, 1]]
        export_name_prefix = "add_ishap_1_96_5_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 48]]
        export_name_prefix = "add_ishap_1_96_5_1_48"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[1, 5, 5, 31], [1, 1, 1, 31]]
        export_name_prefix = "add_ishap_1_96_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 3: Scalar broadcasting
        [[ops_test.Add.cfg]]
        input_shape = [[2, 3, 4, 5], [1, 1, 1, 1]]
        export_name_prefix = "add_ishap_2_3_4_5_scalar"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 4: Broadcasting a lower dimension tensor across a higher one
        [[ops_test.Add.cfg]]
        input_shape = [[2, 3, 4, 5], [1, 1, 1, 5]]
        export_name_prefix = "add_ishap_2_3_4_5_vec"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 5: Fully broadcasting a smaller shape to a larger one
        [[ops_test.Add.cfg]]
        input_shape = [[1, 1, 4, 5], [2, 3, 4, 5]]
        export_name_prefix = "add_ishap_4_5_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 6: Using dimensions of size 1 for broadcasting
        [[ops_test.Add.cfg]]
        input_shape = [[1, 1, 4, 5], [2, 3, 1, 1]]
        export_name_prefix = "add_ishap_1_4_5_to_2_3_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 7: Additional edge case with more complex broadcasting
        [[ops_test.Add.cfg]]
        input_shape = [[1, 3, 4, 5], [2, 1, 1, 1]]
        export_name_prefix = "add_ishap_3_4_5_to_2_1_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 8: Large batch dimension, checking efficient handling
        [[ops_test.Add.cfg]]
        input_shape = [[10, 1, 5, 5], [1, 1, 5, 5]]
        export_name_prefix = "add_large_batch"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 9: High number of channels, testing computational efficiency
        [[ops_test.Add.cfg]]
        input_shape = [[1, 512, 7, 7], [1, 512, 7, 7]]
        export_name_prefix = "add_high_channels"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 10: Minimal shape, edge case testing
        [[ops_test.Add.cfg]]
        input_shape = [[1, 1, 1, 1], [1, 1, 1, 1]]
        export_name_prefix = "add_minimal_shape"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 11: Broadcasting a (1, 1, 1, 5) tensor to (2, 3, 4, 5)
        [[ops_test.Add.cfg]]
        input_shape = [[1, 1, 1, 5], [2, 3, 4, 5]]
        export_name_prefix = "add_broadcast_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[5], [1]]
        export_name_prefix = "add_broadcast_to_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[48], [1]]
        export_name_prefix = "add_broadcast_to_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[2, 48], [1]]
        export_name_prefix = "add_broadcast_to_2_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[2, 5], [1]]
        export_name_prefix = "add_broadcast_to_2_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[2, 5], [2, 1]]
        export_name_prefix = "add_broadcast_to_2_5_2_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[5, 2, 48], [1]]
        export_name_prefix = "add_broadcast_to_5_2_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[8, 2, 5], [1]]
        export_name_prefix = "add_broadcast_to_8_2_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[8, 2, 5], [2, 1]]
        export_name_prefix = "add_broadcast_to_8_2_5_2_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[1, 96, 5, 49], [1, 96, 5, 49]]
        export_name_prefix = "add_ishap_1_96_5_49_un"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[1, 96, 5, 49], [1, 96, 5, 1]]
        export_name_prefix = "add_ishap_1_96_5_49_un2"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 49]]
        export_name_prefix = "add_ishap_1_96_5_49_un3"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Add.cfg]]
        input_shape = [1, 96, 5, 49]
        export_name_prefix = "add_ishape_1_96_5_49_ishape0_weight_un3"
        activation_func = ""
        input0_is_weight = true
        input1_is_weight = false
        input_weight_shape = [1, 96, 5, 1]

        [[ops_test.Add.cfg]]
        input_shape = [1, 96, 5, 49]
        export_name_prefix = "add_ishape_1_96_5_49_ishape1_weight_un3"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = true
        input_weight_shape = [1, 96, 5, 49]


    [ops_test.Sub]
    test_func = "SUB_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
    restrictions = "Support up to 4D"
        [[ops_test.Sub.cfg]]
        input_shape = [[1, 96, 5, 16], [1, 96, 5, 1]]
        export_name_prefix = "sub_ishap_1_96_5_16_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 16]]
        export_name_prefix = "sub_ishap_1_96_5_1_16"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[1, 96, 5, 48], [1, 96, 5, 48]]
        export_name_prefix = "sub_ishap_1_96_5_48"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[1, 96, 5, 48], [1, 96, 5, 1]]
        export_name_prefix = "sub_ishap_1_96_5_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 48]]
        export_name_prefix = "sub_ishap_1_96_5_1_48"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[1, 5, 5, 31], [1, 1, 1, 31]]
        export_name_prefix = "sub_ishap_1_96_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 3: Scalar broadcasting
        [[ops_test.Sub.cfg]]
        input_shape = [[2, 3, 4, 5], [1, 1, 1, 1]]
        export_name_prefix = "sub_ishap_2_3_4_5_scalar"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 4: Broadcasting a lower dimension tensor across a higher one
        [[ops_test.Sub.cfg]]
        input_shape = [[2, 3, 4, 5], [1, 1, 1, 5]]
        export_name_prefix = "sub_ishap_2_3_4_5_vec"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 5: Fully broadcasting a smaller shape to a larger one
        [[ops_test.Sub.cfg]]
        input_shape = [[1, 1, 4, 5], [2, 3, 4, 5]]
        export_name_prefix = "sub_ishap_4_5_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 6: Using dimensions of size 1 for broadcasting
        [[ops_test.Sub.cfg]]
        input_shape = [[1, 1, 4, 5], [2, 3, 1, 1]]
        export_name_prefix = "sub_ishap_1_4_5_to_2_3_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 7: Additional edge case with more complex broadcasting
        [[ops_test.Sub.cfg]]
        input_shape = [[1, 3, 4, 5], [2, 1, 1, 1]]
        export_name_prefix = "sub_ishap_3_4_5_to_2_1_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 8: Large batch dimension, checking efficient handling
        [[ops_test.Sub.cfg]]
        input_shape = [[10, 1, 5, 5], [1, 1, 5, 5]]
        export_name_prefix = "sub_large_batch"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 9: High number of channels, testing computational efficiency
        [[ops_test.Sub.cfg]]
        input_shape = [[1, 512, 7, 7], [1, 512, 7, 7]]
        export_name_prefix = "sub_high_channels"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 10: Minimal shape, edge case testing
        [[ops_test.Sub.cfg]]
        input_shape = [[1, 1, 1, 1], [1, 1, 1, 1]]
        export_name_prefix = "sub_minimal_shape"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 11: Broadcasting a (1, 1, 1, 5) tensor to (2, 3, 4, 5)
        [[ops_test.Sub.cfg]]
        input_shape = [[1, 1, 1, 5], [2, 3, 4, 5]]
        export_name_prefix = "sub_broadcast_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[5], [1]]
        export_name_prefix = "sub_broadcast_to_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[48], [1]]
        export_name_prefix = "sub_broadcast_to_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[2, 48], [1]]
        export_name_prefix = "sub_broadcast_to_2_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[2, 5], [1]]
        export_name_prefix = "sub_broadcast_to_2_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[2, 5], [2, 1]]
        export_name_prefix = "sub_broadcast_to_2_5_2_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[5, 2, 48], [1]]
        export_name_prefix = "sub_broadcast_to_5_2_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[8, 2, 5], [1]]
        export_name_prefix = "sub_broadcast_to_8_2_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[8, 2, 5], [2, 1]]
        export_name_prefix = "sub_broadcast_to_8_2_5_2_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[1, 96, 5, 49], [1, 96, 5, 49]]
        export_name_prefix = "sub_ishap_1_96_5_49_un"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[1, 96, 5, 49], [1, 96, 5, 1]]
        export_name_prefix = "sub_ishap_1_96_5_49_un2"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 49]]
        export_name_prefix = "sub_ishap_1_96_5_49_un3"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Sub.cfg]]
        input_shape = [1, 96, 5, 49]
        export_name_prefix = "sub_ishap_1_96_5_49_ishape0_weight_un3"
        activation_func = ""
        input0_is_weight = true
        input1_is_weight = false
        input_weight_shape = [1, 96, 5, 1]

        [[ops_test.Sub.cfg]]
        input_shape = [1, 96, 5, 1]
        export_name_prefix = "sub_ishap_1_96_5_49_ishape1_weight_un3"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = true
        input_weight_shape = [1, 96, 5, 49]


    [ops_test.Mul]
    test_func = "MUL_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
    restrictions = "Support up to 4D"
        [[ops_test.Mul.cfg]]
        input_shape = [[1, 96, 5, 16], [1, 96, 5, 1]]
        export_name_prefix = "mul_ishap_1_96_5_16_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 16]]
        export_name_prefix = "mul_ishap_1_96_5_1_16"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[1, 96, 5, 48], [1, 96, 5, 48]]
        export_name_prefix = "mul_ishap_1_96_5_48"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[1, 96, 5, 48], [1, 96, 5, 1]]
        export_name_prefix = "mul_ishap_1_96_5_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 48]]
        export_name_prefix = "mul_ishap_1_96_5_1_48"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[1, 5, 5, 31], [1, 1, 1, 31]]
        export_name_prefix = "mul_ishap_1_96_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 3: Scalar broadcasting
        [[ops_test.Mul.cfg]]
        input_shape = [[2, 3, 4, 5], [1, 1, 1, 1]]
        export_name_prefix = "mul_ishap_2_3_4_5_scalar"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 4: Broadcasting a lower dimension tensor across a higher one
        [[ops_test.Mul.cfg]]
        input_shape = [[2, 3, 4, 5], [1, 1, 1, 5]]
        export_name_prefix = "mul_ishap_2_3_4_5_vec"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 5: Fully broadcasting a smaller shape to a larger one
        [[ops_test.Mul.cfg]]
        input_shape = [[1, 1, 4, 5], [2, 3, 4, 5]]
        export_name_prefix = "mul_ishap_4_5_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 6: Using dimensions of size 1 for broadcasting
        [[ops_test.Mul.cfg]]
        input_shape = [[1, 1, 4, 5], [2, 3, 1, 1]]
        export_name_prefix = "mul_ishap_1_4_5_to_2_3_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 7: Additional edge case with more complex broadcasting
        [[ops_test.Mul.cfg]]
        input_shape = [[1, 3, 4, 5], [2, 1, 1, 1]]
        export_name_prefix = "mul_ishap_3_4_5_to_2_1_1_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 8: Large batch dimension, checking efficient handling
        [[ops_test.Mul.cfg]]
        input_shape = [[10, 1, 5, 5], [1, 1, 5, 5]]
        export_name_prefix = "mul_large_batch"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 9: High number of channels, testing computational efficiency
        [[ops_test.Mul.cfg]]
        input_shape = [[1, 512, 7, 7], [1, 512, 7, 7]]
        export_name_prefix = "mul_high_channels"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 10: Minimal shape, edge case testing
        [[ops_test.Mul.cfg]]
        input_shape = [[1, 1, 1, 1], [1, 1, 1, 1]]
        export_name_prefix = "mul_minimal_shape"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 11: Broadcasting a (1, 1, 1, 5) tensor to (2, 3, 4, 5)
        [[ops_test.Mul.cfg]]
        input_shape = [[1, 1, 1, 5], [2, 3, 4, 5]]
        export_name_prefix = "mul_broadcast_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[5], [1]]
        export_name_prefix = "mul_broadcast_to_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[48], [1]]
        export_name_prefix = "mul_broadcast_to_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[2, 48], [1]]
        export_name_prefix = "mul_broadcast_to_2_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[2, 5], [1]]
        export_name_prefix = "mul_broadcast_to_2_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[2, 5], [2, 1]]
        export_name_prefix = "mul_broadcast_to_2_5_2_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[5, 2, 48], [1]]
        export_name_prefix = "mul_broadcast_to_5_2_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[8, 2, 5], [1]]
        export_name_prefix = "mul_broadcast_to_8_2_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[8, 2, 5], [2, 1]]
        export_name_prefix = "mul_broadcast_to_8_2_5_2_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[1, 96, 5, 49], [1, 96, 5, 49]]
        export_name_prefix = "mul_ishap_1_96_5_49_un"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[1, 96, 5, 49], [1, 96, 5, 1]]
        export_name_prefix = "mul_ishap_1_96_5_49_un2"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 49]]
        export_name_prefix = "mul_ishap_1_96_5_49_un3"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Mul.cfg]]
        input_shape = [1, 96, 5, 1]
        export_name_prefix = "mul_ishape_1_96_5_49_ishape1_weight_un3"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = true
        input_weight_shape = [1, 96, 5, 49]

        [[ops_test.Mul.cfg]]
        input_shape = [1, 96, 5, 49]
        export_name_prefix = "mul_ishape_1_96_5_49_ishape0_weight_un3"
        activation_func = ""
        input0_is_weight = true
        input1_is_weight = false
        input_weight_shape = [1, 96, 5, 1]


    [ops_test.Div]
    test_func = "DIV_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
    restrictions = "Support up to 4D"
        [[ops_test.Div.cfg]]
        input_shape = [[1, 96, 5, 5], [1, 96, 5, 5]]
        export_name_prefix = "div_ishap_1_96_5_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[1, 96, 5, 1], [1, 96, 5, 16]]
        export_name_prefix = "div_ishap_1_96_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[1, 96, 10], [1]]
        export_name_prefix = "div_ishap_1_96_10"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 3: Scalar broadcasting
        [[ops_test.Div.cfg]]
        input_shape = [[2, 3, 4, 5], [1, 1, 1, 1]]
        export_name_prefix = "div_ishap_2_3_4_5_scalar"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 4: Broadcasting a lower dimension tensor across a higher one
        [[ops_test.Div.cfg]]
        input_shape = [[2, 3, 4, 5], [1, 1, 1, 5]]
        export_name_prefix = "div_ishap_2_3_4_5_vec"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 5: Fully broadcasting a smaller shape to a larger one
        [[ops_test.Div.cfg]]
        input_shape = [[1, 1], [2, 3, 4, 5]]
        export_name_prefix = "div_ishap_4_5_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 6: Using dimensions of size 1 for broadcasting
        [[ops_test.Div.cfg]]
        input_shape = [[1], [2, 3]]
        export_name_prefix = "div_ishap_1_4_5_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 7: Additional edge case with more complex broadcasting
        [[ops_test.Div.cfg]]
        input_shape = [[1, 3, 4, 5], [2, 1, 1, 1]]
        export_name_prefix = "div_ishap_3_4_5_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 8: Large batch dimension, checking efficient handling
        [[ops_test.Div.cfg]]
        input_shape = [[10, 1, 5, 5], [1, 1, 5, 5]]
        export_name_prefix = "div_large_batch"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 10: Minimal shape, edge case testing
        [[ops_test.Div.cfg]]
        input_shape = [[1, 1, 1, 1], [1, 1, 1, 1]]
        export_name_prefix = "div_minimal_shape"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        # Case 11: Broadcasting a (1, 1, 1, 5) tensor to (2, 3, 4, 5)
        [[ops_test.Div.cfg]]
        input_shape = [[5], [2, 3, 4, 5]]
        export_name_prefix = "div_broadcast_to_2_3_4_5"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[5], [1]]
        export_name_prefix = "div_broadcast_to_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[48], [1]]
        export_name_prefix = "div_broadcast_to_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[2, 48], [1]]
        export_name_prefix = "div_broadcast_to_2_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[2, 5], [1]]
        export_name_prefix = "div_broadcast_to_2_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[2, 5], [2, 1]]
        export_name_prefix = "div_broadcast_to_2_5_2_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[1], [5, 2, 48]]
        export_name_prefix = "div_broadcast_to_5_2_48_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[8, 2, 5], [1]]
        export_name_prefix = "div_broadcast_to_8_2_5_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [[8, 2, 5], [2, 1]]
        export_name_prefix = "div_broadcast_to_8_2_5_2_1"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Div.cfg]]
        input_shape = [2, 1]
        export_name_prefix = "div_broadcast_to_8_2_5_2_1_ishape0_weight"
        activation_func = ""
        input0_is_weight = true
        input1_is_weight = false
        input_weight_shape = [8, 2, 5]

        [[ops_test.Div.cfg]]
        input_shape = [8, 2, 5]
        export_name_prefix = "div_broadcast_to_8_2_5_2_1_ishape1_weight"
        activation_func = ""
        input0_is_weight = false
        input1_is_weight = true
        input_weight_shape = [2, 1]


    [ops_test.GlobalAveragePool]
    test_func = "GLOBAL_AVERAGE_POOLING_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.GlobalAveragePool.cfg]]
        input_shape = [1, 96, 5, 5]
        export_name_prefix = "global_average_pooling_ishap_1_96_5_5"

        [[ops_test.GlobalAveragePool.cfg]]
        input_shape = [1, 51, 3, 3]
        export_name_prefix = "global_average_pooling_ishap_1_51_3_3"

    [ops_test.AveragePool]
    test_func = "AVERAGE_POOLING_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.AveragePool.cfg]]
        input_shape = [1, 96, 7, 7]
        export_name_prefix = "average_pooling_ishap_1_96_7_7_kshape_2_3"
        kernel_size = [2, 3]
        stride = [1, 2]
        padding = [0, 0]

        [[ops_test.AveragePool.cfg]]
        input_shape = [1, 96, 5, 5]
        export_name_prefix = "average_pooling_ishap_1_96_5_5_kshape_2_2"
        kernel_size = [2, 2]
        stride = [2, 2]
        padding = [0, 0]

        [[ops_test.AveragePool.cfg]]
        input_shape = [1, 51, 5, 5]
        export_name_prefix = "average_pooling_ishap_1_51_5_5_kshape_3_1"
        kernel_size = [3, 1]
        stride = [1, 1]
        padding = [0, 0]

        [[ops_test.AveragePool.cfg]]
        input_shape = [1, 51, 7, 7]
        export_name_prefix = "average_pooling_ishap_1_51_7_7_kshape_2_2"
        kernel_size = [2, 2]
        stride = [1, 1]
        padding = [1, 1]

        [[ops_test.AveragePool.cfg]]
        input_shape = [1, 16, 3, 3]
        export_name_prefix = "average_pooling_ishap_1_16_3_3_kshape_5_5"
        kernel_size = [5, 5]
        stride = [1, 1]
        padding = [2, 2]

    [ops_test.MaxPool]
    test_func = "MAX_POOLING_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.MaxPool.cfg]]
        input_shape = [1, 96, 7, 7]
        export_name_prefix = "max_pooling_ishap_1_96_7_7_kshape_2_3"
        kernel_size = [2, 3]
        stride = [1, 2]
        padding = [0, 0]

        [[ops_test.MaxPool.cfg]]
        input_shape = [1, 96, 5, 5]
        export_name_prefix = "max_pooling_ishap_1_96_5_5_kshape_2_2"
        kernel_size = [2, 2]
        stride = [2, 2]
        padding = [0, 0]

        [[ops_test.MaxPool.cfg]]
        input_shape = [1, 51, 5, 5]
        export_name_prefix = "max_pooling_ishap_1_51_5_5_kshape_3_1"
        kernel_size = [3, 1]
        stride = [1, 1]
        padding = [0, 0]

        [[ops_test.MaxPool.cfg]]
        input_shape = [1, 51, 7, 7]
        export_name_prefix = "max_pooling_ishap_1_51_7_7_kshape_2_2"
        kernel_size = [2, 2]
        stride = [1, 1]
        padding = [1, 1]

        [[ops_test.MaxPool.cfg]]
        input_shape = [1, 16, 3, 3]
        export_name_prefix = "max_pooling_ishap_1_16_3_3_kshape_5_5"
        kernel_size = [5, 5]
        stride = [1, 1]
        padding = [2, 2]

    [ops_test.Resize]
    test_func = "RESIZE_TEST"
    quant_bits = ["int8"]
    package = "torch_ops_test"
    restrictions = "support 1d/2d nearest/linear/bilinear, don't support roi and antialias"
        [[ops_test.Resize.cfg]]
        input_shape = [1, 96, 5, 5]
        export_name_prefix = "resize_ishap_1_96_5_5_scale_2_nearest"
        conv = false
        scale_factor = 2.0
        mode = "nearest"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 110, 5, 5]
        export_name_prefix = "resize_ishap_1_110_5_5_scale_2_nearest"
        conv = false
        scale_factor = 2.0
        mode = "nearest"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 96, 5, 5]
        export_name_prefix = "resize_ishap_1_96_5_5_scale_2_3_nearest"
        conv = false
        scale_factor = [2, 3]
        mode = "nearest"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 110, 5, 5]
        export_name_prefix = "resize_ishap_1_110_5_5_scale_2_3_nearest"
        conv = false
        scale_factor = [2, 3]
        mode = "nearest"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 16, 8, 8]
        export_name_prefix = "resize_conv_ishap_1_16_8_8_scale_2_nearest"
        conv = true
        in_features = 16
        out_features = 16
        scale_factor = 2.0
        mode = "nearest"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 96, 5, 5]
        export_name_prefix = "resize_ishap_1_96_5_5_scale_2_linear"
        conv = false
        scale_factor = 2.0
        mode = "bilinear"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 45, 8, 8]
        export_name_prefix = "resize_ishap_1_45_8_8_scale_3_linear"
        conv = false
        scale_factor = 3
        mode = "bilinear"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 96, 5, 5]
        export_name_prefix = "resize_ishap_1_96_5_5_scale_2_linear_align_corners"
        conv = false
        scale_factor = 2.0
        mode = "bilinear"
        align_corners = true

        [[ops_test.Resize.cfg]]
        input_shape = [1, 110, 5, 5]
        export_name_prefix = "resize_ishap_1_110_5_5_size_10_15_nearest"
        conv = false
        size = [10, 15]
        mode = "nearest"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 96, 5, 5]
        export_name_prefix = "resize_ishap_1_96_5_5_size_10_10_linear_align_corners"
        conv = false
        size = [10, 10]
        mode = "bilinear"
        align_corners = true

        [[ops_test.Resize.cfg]]
        input_shape = [1, 96, 5]
        export_name_prefix = "resize_ishap_1_96_5_scale_2_nearest"
        conv = false
        scale_factor = 2
        mode = "nearest"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 110, 5]
        export_name_prefix = "resize_ishap_1_110_5_scale_3_nearest"
        conv = false
        scale_factor = 3
        mode = "nearest"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 96, 5]
        export_name_prefix = "resize_ishap_1_96_5_scale_2_linear"
        conv = false
        scale_factor = 2
        mode = "linear"
        align_corners = false

        [[ops_test.Resize.cfg]]
        input_shape = [1, 110, 5]
        export_name_prefix = "resize_ishap_1_110_5_scale_3_linear_align_corners"
        conv = false
        scale_factor = 3
        mode = "linear"
        align_corners = true

    [ops_test.Sigmoid]
    test_func = "SIGMOID_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Sigmoid.cfg]]
        input_shape = [1, 96, 20, 20]
        export_name_prefix = "sigmoid_ishap_1_96_20_20"

        [[ops_test.Sigmoid.cfg]]
        input_shape = [1, 30, 40]
        export_name_prefix = "sigmoid_ishap_1_30_40"

        [[ops_test.Sigmoid.cfg]]
        input_shape = [1, 355]
        export_name_prefix = "sigmoid_ishap_1_355"

    [ops_test.Tanh]
    test_func = "TANH_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Tanh.cfg]]
        input_shape = [1, 96, 20, 20]
        export_name_prefix = "tanh_ishap_1_96_20_20"

        [[ops_test.Tanh.cfg]]
        input_shape = [1, 30, 40]
        export_name_prefix = "tanh_ishap_1_30_40"

        [[ops_test.Tanh.cfg]]
        input_shape = [1, 355]
        export_name_prefix = "tanh_ishap_1_355"

    [ops_test.Relu]
    test_func = "RELU_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Relu.cfg]]
        input_shape = [1, 96, 20, 20]
        export_name_prefix = "Relu_ishap_1_96_20_20"

        [[ops_test.Relu.cfg]]
        input_shape = [1, 30, 40]
        export_name_prefix = "Relu_ishap_1_30_40"

        [[ops_test.Relu.cfg]]
        input_shape = [1, 355]
        export_name_prefix = "Relu_ishap_1_355"

    [ops_test.LeakyRelu]
    test_func = "LEAKYRELU_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.LeakyRelu.cfg]]
        input_shape = [1, 96, 20, 20]
        slope = 0.02
        export_name_prefix = "leakyrelu_ishap_1_96_20_20"

        [[ops_test.LeakyRelu.cfg]]
        input_shape = [1, 30, 40]
        slope = 0.1
        export_name_prefix = "leakyrelu_ishap_1_30_40"

        [[ops_test.LeakyRelu.cfg]]
        input_shape = [1, 355]
        slope = 0.25
        export_name_prefix = "leakyrelu_ishap_1_355"

    [ops_test.HardSigmoid]
    test_func = "HARDSIGMOID_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.HardSigmoid.cfg]]
        input_shape = [1, 96, 20, 20]
        export_name_prefix = "hardsigmoid_ishap_1_96_20_20"

        [[ops_test.HardSigmoid.cfg]]
        input_shape = [1, 30, 40]
        export_name_prefix = "hardsigmoid_ishap_1_30_40"

        [[ops_test.HardSigmoid.cfg]]
        input_shape = [1, 355]
        export_name_prefix = "hardsigmoid_ishap_1_355"

    [ops_test.HardSwish]
    test_func = "HARDSWISH_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.HardSwish.cfg]]
        input_shape = [1, 96, 20, 20]
        export_name_prefix = "hardswish_ishap_1_96_20_20"

    [ops_test.PRelu]
    test_func = "PRELU_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.PRelu.cfg]]
        input_shape = [1, 20, 20, 20]
        num_parameters = 1
        export_name_prefix = "prelu_ishap_1_20_20_20_1"

        [[ops_test.PRelu.cfg]]
        input_shape = [1, 96, 20, 20]
        num_parameters = 1
        export_name_prefix = "prelu_ishap_1_96_20_20_1"

    [ops_test.Softmax]
    test_func = "SOFTMAX_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
    restrictions = "Dtype of output is float32"
        [[ops_test.Softmax.cfg]]
        input_shape = [1, 10, 20, 40]
        export_name_prefix = "softmax_ishape_1_10_20_40_dim_-1"
        dim = -1
        relu = true

        [[ops_test.Softmax.cfg]]
        input_shape = [1, 25, 35]
        export_name_prefix = "softmax_ishape_1_25_35_dim_1"
        dim = 1
        relu = true

        [[ops_test.Softmax.cfg]]
        input_shape = [1, 33]
        export_name_prefix = "softmax_ishape_1_33_dim_-1"
        dim = -1
        relu = false

    [ops_test.Exp]
    test_func = "EXP_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Exp.cfg]]
        input_shape = [1, 96, 20, 20]
        export_name_prefix = "exp_ishap_1_96_20_20"

        [[ops_test.Exp.cfg]]
        input_shape = [1, 30, 40]
        export_name_prefix = "exp_ishap_1_30_40"

        [[ops_test.Exp.cfg]]
        input_shape = [1, 355]
        export_name_prefix = "exp_ishap_1_355"

    [ops_test.Log]
    test_func = "LOG_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Log.cfg]]
        input_shape = [1, 96, 20, 20]
        export_name_prefix = "log_ishap_1_96_20_20"

        [[ops_test.Log.cfg]]
        input_shape = [1, 30, 40]
        export_name_prefix = "log_ishap_1_30_40"

        [[ops_test.Log.cfg]]
        input_shape = [1, 355]
        export_name_prefix = "log_ishap_1_355"

    [ops_test.Sqrt]
    test_func = "SQRT_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Sqrt.cfg]]
        input_shape = [1, 96, 20, 20]
        export_name_prefix = "sqrt_ishap_1_96_20_20"

        [[ops_test.Sqrt.cfg]]
        input_shape = [1, 30, 40]
        export_name_prefix = "sqrt_ishap_1_30_40"

        [[ops_test.Sqrt.cfg]]
        input_shape = [1, 355]
        export_name_prefix = "sqrt_ishap_1_355"

    [ops_test.Concat]
    test_func = "CONCAT_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Concat.cfg]]
        input_shape = [[1, 80, 20, 20], [1, 48, 20, 20]]
        export_name_prefix = "concat_ishape_1_80_20_20_1_48_20_20"
        axis = 1

        [[ops_test.Concat.cfg]]
        input_shape = [[1, 5, 10, 10], [1, 5, 12, 10]]
        export_name_prefix = "concat_ishape_1_5_10_10_1_5_12_10"
        axis = 2

        [[ops_test.Concat.cfg]]
        input_shape = [[1, 5, 10, 10], [1, 5, 10, 31]]
        export_name_prefix = "concat_ishape_1_5_10_10_1_5_10_31"
        axis = 3


    [ops_test.Clip]
    test_func = "CLIP_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Clip.cfg]]
        input_shape = [1, 10, 5, 5]
        export_name_prefix = "clip_ishape_1_10_5_5_min_0_max_6"
        min = 0
        max = 6
        export_path = ""
        [[ops_test.Clip.cfg]]
        input_shape = [1, 100, 16]
        export_name_prefix = "clip_ishape_1_100_16_min_-5_max_7"
        min = -5
        max = 7
        export_path = ""

    [ops_test.Flatten]
    test_func = "FLATTEN_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Flatten.cfg]]
        input_shape = [1, 10, 32, 5, 5]
        export_name_prefix = "flatten_ishape_1_10_32_5_5_start_0_end__2"
        start_dim = 0
        end_dim = -2
        export_path = ""

        [[ops_test.Flatten.cfg]]
        input_shape = [1, 10, 5, 5]
        export_name_prefix = "flatten_ishape_1_10_5_5_start_0_end__1"
        start_dim = 0
        end_dim = -1
        export_path = ""

        [[ops_test.Flatten.cfg]]
        input_shape = [1, 5, 16]
        export_name_prefix = "flatten_ishape_1_5_16_start_0_end_2"
        start_dim = 0
        end_dim = 2
        export_path = ""

    [ops_test.Reshape]
    test_func = "RESHAPE_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Reshape.cfg]]
        input_shape = [1, 10, 32, 5, 5]
        export_name_prefix = "reshape_ishape_1_10_32_5_5_shape_320_5_5"
        shape = [320, 5, 5]
        export_path = ""

        [[ops_test.Reshape.cfg]]
        input_shape = [1, 10, 32, 5, 5]
        export_name_prefix = "reshape_ishape_1_10_32_5_5_shape_1600_5"
        shape = [1600, 5]
        export_path = ""

        [[ops_test.Reshape.cfg]]
        input_shape = [1, 10, 1, 5]
        export_name_prefix = "reshape_ishape_1_10_1_5_shape_1_50"
        shape = [1, 50]
        export_path = ""

    [ops_test.Transpose]
    test_func = "TRANSPOSE_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Transpose.cfg]]
        input_shape = [1, 10, 20, 40]
        export_name_prefix = "transpose_ishape_1_10_20_40_perm_0_2_1_3"
        export_path = ""
        perm = [0, 2, 1, 3]

        [[ops_test.Transpose.cfg]]
        input_shape = [1, 25, 35]
        export_name_prefix = "transpose_ishape_1_25_35_perm_2_0_1"
        export_path = ""
        perm = [2, 0, 1]

        [[ops_test.Transpose.cfg]]
        input_shape = [1, 33]
        export_name_prefix = "transpose_ishape_1_33_perm_1_0"
        export_path = ""
        perm = [1, 0]


    [ops_test.Squeeze]
    test_func = "SQUEEZE_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Squeeze.cfg]]
        input_shape = [1, 10, 1, 2, 5]
        export_name_prefix = "squeeze_ishape_1_10_1_2_5_dim_2"
        dim = 2

        [[ops_test.Squeeze.cfg]]
        input_shape = [1, 10, 1, 2, 1]
        export_name_prefix = "squeeze_ishape_1_10_1_2_1_dim_-1"
        dim = -1

        [[ops_test.Squeeze.cfg]]
        input_shape = [1, 2, 1, 4]
        export_name_prefix = "squeeze_ishape_1_2_1_4"
        dim = false

    [ops_test.Unsqueeze]
    test_func = "UNSQUEEZE_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Unsqueeze.cfg]]
        input_shape = [1, 10, 2, 5]
        export_name_prefix = "Unsqueeze_ishape_1_10_2_5_dim_0"
        dim = 0

        [[ops_test.Unsqueeze.cfg]]
        input_shape = [1, 10, 2, 5]
        export_name_prefix = "Unsqueeze_ishape_1_10_2_5_dim_2"
        dim = 2

        [[ops_test.Unsqueeze.cfg]]
        input_shape = [1, 10, 2, 5]
        export_name_prefix = "Unsqueeze_ishape_1_10_2_5_dim_-1"
        dim = -1

        [[ops_test.Unsqueeze.cfg]]
        input_shape = [1, 2, 4]
        export_name_prefix = "Unsqueeze_ishape_1_2_4_dim_3"
        dim = 3


    [ops_test.Slice]
    test_func = "SLICE_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Slice.cfg]]
        input_shape = [1, 96, 20, 20]
        starts = [0, 1, 1]
        ends = [1, 20, -1]
        axes = [0, 1, 2]
        steps = [1, 2, 1]
        export_name_prefix = "slice_ishap_1_96_20_20"

        [[ops_test.Slice.cfg]]
        input_shape = [1, 10, 10]
        starts = [0, 1, 1]
        ends = [1, 9, -1]
        axes = [0, 1, 2]
        steps = [1, 3, 2]
        export_name_prefix = "slice_ishap_1_10_10"

        [[ops_test.Slice.cfg]]
        input_shape = [15, 133]
        starts = [0, 10]
        ends = [15, -10]
        axes = [0, 1]
        steps = [1, 1]
        export_name_prefix = "slice_ishap_15_133"

        [[ops_test.Slice.cfg]]
        input_shape = [38, 2, 2]
        starts = [0]
        ends = [2]
        axes = [0]
        steps = [1]
        export_name_prefix = "slice_ishap_38_2_2"

        [[ops_test.Slice.cfg]]
        input_shape = [1, 32]
        starts = []
        ends = []
        axes = [1]
        steps = []
        flip = -1
        export_name_prefix = "slice_ishap_1_32_flip"

        [[ops_test.Slice.cfg]]
        input_shape = [1, 5, 10]
        starts = []
        ends = []
        axes = [1,2]
        steps = []
        flip = -1
        export_name_prefix = "slice_ishap_1_5_10_flip"

        [[ops_test.Slice.cfg]]
        input_shape = [1, 8, 20, 31]
        starts = []
        ends = []
        axes = [1, 3]
        steps = []
        flip = -1
        export_name_prefix = "slice_ishap_1_8_20_20_flip"


    [ops_test.Pad]
    test_func = "PAD_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
    restrictions = "Do not support wrap mode"
        [[ops_test.Pad.cfg]]
        input_shape = [64]
        pads = [3,3]
        mode = "constant"
        const_value = 1
        export_name_prefix = "pad_ishap_64_pads_3_3_constant_1"

        [[ops_test.Pad.cfg]]
        input_shape = [10, 100]
        pads = [1,0,5,5]
        mode = "constant"
        const_value = 0
        export_name_prefix = "pad_ishap_10_100_pads_1_0_5_5_constant_0"

        [[ops_test.Pad.cfg]]
        input_shape = [15, 133]
        pads = [11,12]
        mode = "replicate"
        const_value = 0
        export_name_prefix = "pad_ishap_15_133_pads_11_12_replicate"

        [[ops_test.Pad.cfg]]
        input_shape = [9, 33]
        pads = [4,4]
        mode = "reflect"
        const_value = 0
        export_name_prefix = "pad_ishap_9_33_pads_4_4_reflect"

        [[ops_test.Pad.cfg]]
        input_shape = [2, 10, 100]
        pads = [1,1,2,2]
        mode = "constant"
        const_value = 2
        export_name_prefix = "pad_ishap_2_10_100_pads_1_1_2_2_constant_2"

        [[ops_test.Pad.cfg]]
        input_shape = [1, 15, 133]
        pads = [1,1,10,10]
        mode = "replicate"
        const_value = 0
        export_name_prefix = "pad_ishap_1_15_133_pads_1_1_10_10_replicate"

        [[ops_test.Pad.cfg]]
        input_shape = [5, 9, 33]
        pads = [1,2,3,4]
        mode = "reflect"
        const_value = 0
        export_name_prefix = "pad_ishap_5_9_33_pads_1_2_3_4_reflect"

        [[ops_test.Pad.cfg]]
        input_shape = [2, 5, 10, 50]
        pads = [2,1,1,1,1,1,2,2]
        mode = "constant"
        const_value = 1
        export_name_prefix = "pad_ishap_2_5_10_50_pads_2_1_1_1_1_1_2_2_constant_1"

        [[ops_test.Pad.cfg]]
        input_shape = [2, 4, 15, 33]
        pads = [1,2,1,2,3,4]
        mode = "replicate"
        const_value = 0
        export_name_prefix = "pad_ishap_2_4_15_33_pads_1_2_1_2_3_4_replicate"

        [[ops_test.Pad.cfg]]
        input_shape = [1, 5, 9, 33]
        pads = [1,2,1,2,3,4]
        mode = "reflect"
        const_value = 0
        export_name_prefix = "pad_ishap_1_5_9_33_pads_1_2_1_2_3_4_reflect"

        [[ops_test.Pad.cfg]]
        input_shape = [2, 2, 5, 10, 50]
        pads = [2,1,1,2,1,2]
        mode = "reflect"
        const_value = 0
        export_name_prefix = "pad_ishap_2_2_5_10_50_pads_2_1_1_2_1_2_reflect"

        [[ops_test.Pad.cfg]]
        input_shape = [2, 4, 5, 10, 20]
        pads = [1,3,1,3,3,1]
        mode = "replicate"
        const_value = 0
        export_name_prefix = "pad_ishap_2_4_5_10_20_pads_1_3_1_3_3_1_replicate"

        [[ops_test.Pad.cfg]]
        input_shape = [2, 2, 5, 10, 50]
        pads = [2,1,1,1,1,1,1,1,1,1]
        mode = "constant"
        const_value = 1
        export_name_prefix = "pad_ishap_2_2_5_10_50_pads_2_1_1_1_1_1_1_1_1_1_constant_1"


    [ops_test.MatMul]
    test_func = "MATMUL_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
    restrictions = "Support up to 4D"
        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 10], [1, 10]]
        export_name_prefix = "MatMul_ishape0_10_ishape1_10"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 3, 10], [1, 10, 9]]
        export_name_prefix = "MatMul_ishape0_3_10_ishape1_10_9"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 3, 10], [1, 10, 32]]
        export_name_prefix = "MatMul_ishape0_3_10_ishape1_10_32"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 10], [1, 10, 32]]
        export_name_prefix = "MatMul_ishape0_10_ishape1_10_32"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 16, 10], [1, 10]]
        export_name_prefix = "MatMul_ishape0_16_10_ishape1_10"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 10], [1, 5, 10, 32]]
        export_name_prefix = "MatMul_ishape0_10_ishape1_5_10_32"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 5, 32, 10], [1, 10]]
        export_name_prefix = "MatMul_ishape0_5_32_10_ishape1_10"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 5, 32, 10], [1, 10, 32]]
        export_name_prefix = "MatMul_ishape0_5_32_10_ishape1_10_32"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 32, 10], [1, 5, 10, 32]]
        export_name_prefix = "MatMul_ishape0_32_10_ishape1_5_10_32"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 32, 10], [1, 7, 5, 10, 32]]
        export_name_prefix = "MatMul_ishape0_32_10_ishape1_7_5_10_32"
        activation_func = "ReLU"    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 7, 32, 10], [1, 7, 1, 10, 32]]
        export_name_prefix = "MatMul_ishape0_7_32_10_ishape1_7_1_10_32"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 32, 10], [1, 10, 35]]
        export_name_prefix = "MatMul_ishape0_32_10_ishape1_10_35"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 10], [1, 5, 10, 35]]
        export_name_prefix = "MatMul_ishape0_10_ishape1_5_10_35"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 1, 32, 10], [1, 2, 10, 35]]
        export_name_prefix = "MatMul_ishape0_1_32_10_ishape1_2_10_35"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [[1, 7, 32, 10], [1, 7, 1, 10, 41]]
        export_name_prefix = "MatMul_ishape0_7_32_10_ishape1_7_1_10_41"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = false

        [[ops_test.MatMul.cfg]]
        input_shape = [1, 10]
        export_name_prefix = "MatMul_ishape0_10_ishape1_weight_5_10_35"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = true
        input_weight_shape = [1, 5, 10, 35]

        [[ops_test.MatMul.cfg]]
        input_shape = [1, 32, 10]
        export_name_prefix = "MatMul_ishape0_32_10_ishape1_weight_5_10_35"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = true
        input_weight_shape = [1, 5, 10, 35]

        [[ops_test.MatMul.cfg]]
        input_shape = [1, 5, 32, 10]
        export_name_prefix = "MatMul_ishape0_5_32_10_ishape1_weight_7_1_10_32"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = true
        input_weight_shape = [7, 1, 10, 32]

        [[ops_test.MatMul.cfg]]
        input_shape = [1, 7, 32, 10]
        export_name_prefix = "MatMul_ishape0_7_32_10_ishape1_weight_7_1_10_35"
        activation_func = ""    # "", "ReLU"
        input1_is_weight = true
        input_weight_shape = [7, 1, 10, 35]


    [ops_test.Split]
    test_func = "SPLIT_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Split.cfg]]
        input_shape = [1, 10, 2, 5]
        export_name_prefix = "Split_ishape_1_10_2_5_split_size_3_dim_1"
        split_size_or_sections = 3
        dim = 1

        [[ops_test.Split.cfg]]
        input_shape = [1, 4, 20, 5, 10]
        export_name_prefix = "Split_ishape_1_4_20_5_10_split_size_5_4_5_3_3_dim_2"
        split_size_or_sections = [5, 4, 5, 3, 3]
        dim = 2


    [ops_test.Gather]
    test_func = "GATHER_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Gather.cfg]]
        input_shape = [1, 3, 2]
        export_name_prefix = "Gather_ishape_3_2_indices_0_1_1_2_dim_0"
        indices = [[0, 1], [1, 2],]
        axis = 0

        [[ops_test.Gather.cfg]]
        input_shape = [1, 3, 2]
        export_name_prefix = "Gather_ishape_3_2_indices_0_1_1_1_2_2_dim_0"
        indices = [[0, 1, 1], [1, 2, 2],]
        axis = 0

        [[ops_test.Gather.cfg]]
        input_shape = [1, 2, 3, 2]
        export_name_prefix = "Gather_ishape_2_3_2_indices_0_1_1_1_2_2_dim_1"
        indices = [[0, 1, 1], [1, 2, 2],]
        axis = 1


    [ops_test.Requantize]
    test_func = "REQUANTIZE_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Requantize.cfg]]
        input_shape = [1, 16, 100, 100]
        export_name_prefix = "Requantize_ishape_1_16_100_100_shift_right"
        shift_left = false

        [[ops_test.Requantize.cfg]]
        input_shape = [1, 16, 100, 100]
        export_name_prefix = "Requantize_ishape_1_16_100_100_shift_left"
        shift_left = true

        [[ops_test.Requantize.cfg]]
        input_shape = [1, 13, 100, 100]
        export_name_prefix = "Requantize_ishape_1_13_100_100_shift_right"
        shift_left = false

        [[ops_test.Requantize.cfg]]
        input_shape = [1, 13, 100, 100]
        export_name_prefix = "Requantize_ishape_1_13_100_100_shift_left"
        shift_left = true

        [[ops_test.Requantize.cfg]]
        input_shape = [1, 16, 100, 100]
        export_name_prefix = "Requantize_ishape_1_16_100_100_shift_right_dispatch_add"
        shift_left = false
        dispatch_table = {"/Add" = 16}

        [[ops_test.Requantize.cfg]]
        input_shape = [1, 16, 100, 100]
        export_name_prefix = "Requantize_ishape_1_16_100_100_shift_left_dispatch_add"
        shift_left = true
        dispatch_table = {"/Add_1" = 16}

        [[ops_test.Requantize.cfg]]
        input_shape = [1, 16, 100, 100]
        export_name_prefix = "Requantize_ishape_1_16_100_100_shift_right_dispatch_sigmoid_sub"
        shift_left = false
        dispatch_table = {"/Sigmoid" = 16, "/Sub" = 16}


    [ops_test.Elu]
    test_func = "ELU_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Elu.cfg]]
        input_shape = [1, 10, 2, 5]
        export_name_prefix = "Elu_ishape_1_10_2_5_alpha_0_3"
        alpha = 0.3


    [ops_test.Greater]
    test_func = "GREATER_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Greater.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 16]]
        export_name_prefix = "Greater_ishap_1_4_5_16"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Greater.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 1]]
        export_name_prefix = "Greater_ishap_1_4_5_16_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Greater.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 16]]
        export_name_prefix = "Greater_ishap_1_4_5_1_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Greater.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 31]]
        export_name_prefix = "Greater_ishap_1_4_5_31_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Greater.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 1]]
        export_name_prefix = "Greater_ishap_1_4_5_31_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Greater.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 31]]
        export_name_prefix = "Greater_ishap_1_4_5_1_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false


    [ops_test.GreaterOrEqual]
    test_func = "GREATEROREQUAL_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.GreaterOrEqual.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 16]]
        export_name_prefix = "GreaterOrEqual_ishap_1_4_5_16"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.GreaterOrEqual.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 1]]
        export_name_prefix = "GreaterOrEqual_ishap_1_4_5_16_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.GreaterOrEqual.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 16]]
        export_name_prefix = "GreaterOrEqual_ishap_1_4_5_1_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.GreaterOrEqual.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 31]]
        export_name_prefix = "GreaterOrEqual_ishap_1_4_5_31_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.GreaterOrEqual.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 1]]
        export_name_prefix = "GreaterOrEqual_ishap_1_4_5_31_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.GreaterOrEqual.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 31]]
        export_name_prefix = "GreaterOrEqual_ishap_1_4_5_1_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false


    [ops_test.Equal]
    test_func = "EQUAL_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Equal.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 16]]
        export_name_prefix = "Equal_ishap_1_4_5_16"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Equal.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 1]]
        export_name_prefix = "Equal_ishap_1_4_5_16_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Equal.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 16]]
        export_name_prefix = "Equal_ishap_1_4_5_1_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Equal.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 31]]
        export_name_prefix = "Equal_ishap_1_4_5_31_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Equal.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 1]]
        export_name_prefix = "Equal_ishap_1_4_5_31_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Equal.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 31]]
        export_name_prefix = "Equal_ishap_1_4_5_1_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false


    [ops_test.Less]
    test_func = "LESS_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.Less.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 16]]
        export_name_prefix = "Less_ishap_1_4_5_16"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Less.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 1]]
        export_name_prefix = "Less_ishap_1_4_5_16_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Less.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 16]]
        export_name_prefix = "Less_ishap_1_4_5_1_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Less.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 31]]
        export_name_prefix = "Less_ishap_1_4_5_31_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Less.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 1]]
        export_name_prefix = "Less_ishap_1_4_5_31_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.Less.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 31]]
        export_name_prefix = "Less_ishap_1_4_5_1_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false


    [ops_test.LessOrEqual]
    test_func = "LESSOREQUAL_TEST"
    quant_bits = ["int8", "int16"]
    package = "torch_ops_test"
        [[ops_test.LessOrEqual.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 16]]
        export_name_prefix = "LessOrEqual_ishap_1_4_5_16"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.LessOrEqual.cfg]]
        input_shape = [[1, 4, 5, 16], [1, 4, 5, 1]]
        export_name_prefix = "LessOrEqual_ishap_1_4_5_16_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.LessOrEqual.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 16]]
        export_name_prefix = "LessOrEqual_ishap_1_4_5_1_bc"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.LessOrEqual.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 31]]
        export_name_prefix = "LessOrEqual_ishap_1_4_5_31_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.LessOrEqual.cfg]]
        input_shape = [[1, 4, 5, 31], [1, 4, 5, 1]]
        export_name_prefix = "LessOrEqual_ishap_1_4_5_31_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false

        [[ops_test.LessOrEqual.cfg]]
        input_shape = [[1, 4, 5, 1], [1, 4, 5, 31]]
        export_name_prefix = "LessOrEqual_ishap_1_4_5_1_bc_unalign"
        input0_is_weight = false
        input1_is_weight = false

    [ops_test.ReverseSequence]
    test_func = "REVERSESEQUENCE_TEST"
    quant_bits = ["int8", "int16"]
    package = "onnx_ops_test"
        [[ops_test.ReverseSequence.cfg]]
        input_shape = [1, 100]
        sequence_lens = [50]
        batch_axis = 0
        time_axis = 1
        export_name_prefix = "ReverseSequence_ishape_1_100"

        [[ops_test.ReverseSequence.cfg]]
        input_shape = [1, 5, 20]
        sequence_lens = [3]
        batch_axis = 0
        time_axis = 1
        export_name_prefix = "ReverseSequence_ishape_1_5_20"




[models_test]
    [models_test.picodet]
        input_shape = [1, 3, 224, 224]
        onnx_model_path = "picodet_xs_224_mod_chns_relu_rep_sim.onnx"
        export_path = ""
        export_name_prefix = "picodet_xs_224_mod_chns_relu_rep_sim"

    [models_test.mobilenet_v2]
        input_shape = [1, 3, 224, 224]
        onnx_model_path = "mobilenet_v2.onnx"
        export_path = ""
        export_name_prefix = "mobilenet_v2"
